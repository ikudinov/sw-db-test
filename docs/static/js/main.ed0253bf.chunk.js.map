{"version":3,"sources":["storage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["KEY","LocalStorage","value","localStorage","setItem","e","console","log","message","getItem","IndexedDB","save","a","localforage","setDriver","INDEXEDDB","table","createInstance","name","storeName","_dbInfo","db","close","load","App","useState","Date","toISOString","time","setTime","timeIDB","setTimeIDB","timeLS","setTimeLS","useEffect","then","className","src","logo","alt","href","type","onChange","target","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.ed0253bf.chunk.js","sourcesContent":["import localforage from \"localforage\";\n\nconst KEY = \"key1\";\n\nconst LocalStorage = {\n  save: (value) => {\n    try {\n      localStorage.setItem(KEY, value);\n    } catch (e) {\n      console.log('Error LS', e.message);\n    }\n  },\n  load: () => {\n    try {\n      return localStorage.getItem(KEY);\n    } catch (e) {\n      console.log('Error LS', e.message);\n      return null;\n    }\n  },\n};\n\nconst IndexedDB = {\n  save: async (value) => {\n    try {\n      localforage.setDriver([localforage.INDEXEDDB]);\n\n      const table = localforage.createInstance({\n        name: \"table1\",\n        storeName: \"store1\",\n      });\n\n      await table.setItem(KEY, value);\n\n      table._dbInfo.db.close();\n    } catch (e) {\n      console.log('Error IDB', e.message);\n    }\n  },\n  load: async () => {\n    try {\n      const table = localforage.createInstance({\n        name: \"table1\",\n        storeName: \"store1\",\n      });\n\n      const value = await table.getItem(KEY);\n\n      table._dbInfo.db.close();\n\n      return value;\n    } catch (e) {\n      console.log('Error IDB', e.message);\n      return null;\n    }\n  },\n};\n\nexport { LocalStorage, IndexedDB };\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { IndexedDB, LocalStorage } from \"./storage\";\n\nfunction App() {\n  const [time, setTime] = useState(new Date().toISOString());\n  const [timeIDB, setTimeIDB] = useState(\"\");\n  const [timeLS, setTimeLS] = useState(\"\");\n\n  const handleSave = () => {\n    IndexedDB.save(time);\n    LocalStorage.save(time);\n  };\n\n  useEffect(() => {\n    IndexedDB.load().then(setTimeIDB);\n    setTimeLS(LocalStorage.load());\n  }, [setTimeIDB, setTimeLS]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          В indexedDB: {timeIDB}\n          <br/>\n          В localStorage: {timeLS}\n          <br/>\n          <a href=\"exms://xlnk.ms/join/chat/MzBlNWU2OWEtY2YwOS00MDVmLTliNGYtNGE4ODE1MzI1ZWRkOmE2MTlmY2ZhLWExOWItNTI1Ni1hNTkyLTliMGU3NWNhMDg5Njo3NDdiN2U4MS1lNTQ1LTUyM2MtOWY5OS1mOWRiNTI4N2Q5ZDk=\">\n            EXMS link\n          </a>\n        </p>\n        <p>\n          <input\n            type=\"text\"\n            value={time}\n            onChange={(e) => setTime(e.target.value)}\n          />\n        </p>\n        <p>\n          <button onClick={handleSave}>СОХРАНИТЬ</button>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}